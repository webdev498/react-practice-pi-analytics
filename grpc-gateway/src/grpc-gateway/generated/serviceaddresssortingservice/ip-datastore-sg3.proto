syntax = "proto3";
option java_package = "pi.ip.generated.datastore_sg3";
option java_multiple_files = false;

import "google/protobuf/wrappers.proto";
import "cite_service.proto";
import "patent_common.proto";
import "ip-datastore-common.proto";

// this service is provided by ip-datastore-service-sg3
service DatastoreSg3Service {

    // Upserts LawFirmRecord document types in Elasticsearch index
    // Updates relevant PAC law firms in CiteGroupRecord document types in Elasticsearch index
    rpc UpsertIntoLawFirmCaches (LawFirm) returns (LawFirmUpserted) {
    }

    // Deletes LawFirmRecord document types from Elasticsearch index
    // Deletes PAC law firm in CiteGroupRecord document types in Elasticsearch index
    rpc DeleteFromLawFirmCaches (DeleteLawFirmRequest) returns (LawFirmDeleted) {
    }

    rpc ProcessApplicantSourceUpdate (stream DocDbXmlNodeUniPatCollection) returns (AckResponse) {
    }

    rpc GetApplicantByFamilySyncs (GetSyncRequest) returns (stream FamilyMsg) {
    }

    //invention title
    rpc ProcessInventionTitleSourceUpdate (stream DocDbXmlNodeUniPatCollection) returns (AckResponse) {
    }

    // process citation sync record in onPrem , this method will
    // 1: parse docDbXml node
    // 2: extract meaningful field, ncFamId,pacFamId,ncUniPat,pacUniPat, citeLevel,citeDate with help of refNum service
    // 3: store direct citation data into table "prod:directCite"
    //  3.1: row key: ncFamId_pacFamId_ncUniPat_pacUniPat
    //  3.2: save dynamic column: type_$citeType
    //  3.3: save dynamic column: date_$citeDate(in yyyyMMdd format)
    //  3.4: have co processor to track persist of row in "prod:directCitation" to "prod:directCitationSync"
    // 4: delete citation sync record in batch by calling the batch delete endpoint in onPrem
    rpc ProcessCitationSourceUpdate (stream DocDbXmlNodeUniPatCollection) returns (AckResponse) {
    }

    rpc GetDirectCiteSyncKeys (SyncKeysRequest) returns (SyncKeysResponse) {
    }

    rpc GetDirectCites (SyncKeys) returns (GetDirectCitesResponse) {
    }

    rpc DeleteDirectCiteSyncs (SyncKeys) returns (AckResponse) {
    }

    // Process patent health update
    // 1: Stores patent health data in HBase table "prod:patHealth"
    //    Updates patent health only if given sourceDataDate is newer than the on in db
    // 2: Deletes the patent health sync record by calling ip-datastore-onprem service
    rpc ProcessPatentHealthSourceUpdate (stream cite_service.PatentHealth) returns (AckResponse) {
    }

    rpc GetFamilyHealthSyncKeys (SyncKeysRequest) returns (SyncKeysResponse) {
    }

    rpc GetFamilyHealths (SyncKeys) returns (GetFamilyHealthsResponse) {
    }

    rpc DeleteFamilyHealthSyncKeys (SyncKeys) returns (AckResponse) {
    }

    rpc GetAppPhaseByFamily (FamIdRequest) returns (AppPhaseByFamilyResponse) {
    }

    rpc UpdateCasePhase (cite_service.FamilyPhase) returns (AckResponse) {
    }

    rpc GetAppPhaseSyncs (AppPhaseSyncsRequest) returns (AppPhaseSyncsResponse) {
    }

    rpc DeleteAppPhaseSyncs (DeleteAppPhaseSyncsRequest) returns (AckResponse) {
    }

    // Deprecated once we switch to new service address sorting admin backend
    //
    // String value represent json format of ThinLawFirmServiceAddressRecord
    // the record will be inserted into ES index lawfirm_service_address
    rpc UpsertThinLawFirmServiceAddressRecord (google.protobuf.StringValue) returns (AckResponse) {
    }

    // Deprecated once we switch to new service address sorting admin backend
    //
    // Delete one es record in index lawfirm_service_address, the string value represent service address id in string format
    rpc DeleteThinLawFirmServiceAddressRecord (google.protobuf.StringValue) returns (AckResponse) {
    }

    // Deprecated once we switch to new service address sorting admin backend
    //
    // Suggest simiar ThinLawFirmServiceAddressRecord from given ThinServiceAddressRecord
    // String for input represent json format of ThinServiceAddressRecord
    // Return string represent a list of ThinLawFirmServiceAddressRecord
    rpc SuggestSimilarThinLawFirmServiceAddressRecord (google.protobuf.StringValue) returns (google.protobuf.StringValue) {
    }

    // Upsert into lawfirm_service_address ES index
    rpc UpsertThinLawFirmServiceAddress (ThinLawFirmServiceAddress) returns (AckResponse) {
    }

    // Delete from lawfirm_service_address ES index
    // Send the service address ID as an int64 value
    rpc DeleteThinLawFirmServiceAddress (google.protobuf.Int64Value) returns (AckResponse) {
    }

    rpc SuggestSimilarThinServiceAddress (SuggestSimilarThinServiceAddressRequest) returns (SuggestSimilarThinServiceAddressResponse) {
    }

    // one time usage to update orig law firm which is created before hbase in place
    // String in param is citeRecord Id
    // TODO IL will delete this method after usage
    rpc UpdateOrigFirm (google.protobuf.StringValue) returns (AckResponse) {
    }

}

message GetDirectCitesResponse {
    repeated cite_service.DirectCite direct_cite = 1;
}

message GetFamilyHealthsResponse {
    repeated cite_service.FamilyHealth family_healths = 1;
}

message LawFirmUpserted {
    int64 law_firm_id = 1;
}

message DeleteLawFirmRequest {
    int64 law_firm_id = 1;
}

message LawFirmDeleted {
    int64 law_firm_id = 1;
}


message AppPhaseSyncRecord {
    enum SyncPhaseType {
        Calculate = 0;
        Notify = 1;
    }

    int64 family_id = 1;
    SyncPhaseType phase_type = 2;
    int64 timestamp = 3;
}

message AppPhaseSyncsRequest {
    int32 limit = 1;
    // if set, requests that resulting list have rowKey > startKey
    int64 start_key = 2;

    // for single reader, use reader_number=0, number_of_readers=1
    SplitReader split_reader = 3;
}

message AppPhaseSyncsResponse {
    repeated AppPhaseSyncRecord records = 1;
    // whether the end of the row keys was reached
    bool end_of_sync_key_source = 2;
}

message AppPhaseByFamilyResponse {
    int64 family_id = 1;
    cite_service.CasePhase case_phase = 2;
    int64 timestamp = 3;
}

message DeleteAppPhaseSyncsRequest {
    repeated int64 family_id = 1;
}

message ThinLawFirmServiceAddress {
    ThinServiceAddress thin_service_address = 1;
    ThinLawFirm thin_law_firm = 2;
    bool not_a_law_firm = 3;
}

message ThinServiceAddress {
    int64 service_address_id = 1;
    string name_address = 2;
    string country = 3; // Country code
    double longitude = 4;
    double latitude = 5;
}

message ThinLawFirm {
    int64 id = 1;
    string name = 2;
}

message SuggestSimilarThinServiceAddressRequest {
    string name_address = 1;
    string country = 2; // Country code
    double longitude = 3;
    double latitude = 4;
}

message SuggestSimilarThinServiceAddressResponse {
    repeated ThinLawFirmServiceAddress suggestions = 1;
}
